{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\n\nclass Movie extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setupBeforeUnloadListener\", () => {\n      window.addEventListener(\"beforeunload\", ev => {\n        ev.preventDefault();\n        return ev.returnValue = \"Are you sure you want to close ?\";\n      });\n    });\n\n    this.state = {\n      title: \"\",\n      titleImage: \"\",\n      year: \"2020-05\",\n      genre: \"\",\n      rating: 5,\n      scriptRating: 5,\n      directionRating: 5,\n      dialoguesRating: 5,\n      cinematographyRating: 5,\n      editingRating: 5,\n      musicRating: 5,\n      actingRating: 5,\n      synopsis: \"\",\n      pros: \"\",\n      cons: \"\",\n      language: \"\",\n      cast: \"\",\n      ticketImage: \"\",\n      watchDate: \"2020-05-19\",\n      placeWatched: \"\",\n      userId: \"\",\n      password: \"\",\n      trailer: \"\"\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n  }\n\n  onSubmit(evt) {\n    var data = {\n      title: this.state.title,\n      titleImage: this.state.titleImage,\n      year: this.state.year.substr(0, 4),\n      language: this.state.language,\n      genre: this.state.genre.split(\",\"),\n      rating: this.state.rating,\n      scriptRating: this.state.scriptRating,\n      directionRating: this.state.directionRating,\n      dialoguesRating: this.state.dialoguesRating,\n      cinematographyRating: this.state.cinematographyRating,\n      editingRating: this.state.editingRating,\n      musicRating: this.state.musicRating,\n      actingRating: this.state.actingRating,\n      trailer: this.state.trailer,\n      review: {\n        synopsis: this.state.synopsis,\n        pros: this.state.pros.split(\"\\n\"),\n        cons: this.state.cons.split(\"\\n\")\n      },\n      cast: this.state.cast.split(\"\\n\"),\n      ticketDetails: {\n        ticketImage: this.state.ticketImage,\n        watchDate: this.state.watchDate,\n        placeWatched: this.state.placeWatched\n      },\n      userId: this.state.userId,\n      password: this.state.password\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    var proxyUrl = 'https://fierce-chamber-21718.herokuapp.com/';\n    var url = 'https://api.popcorntales.com/movie';\n    fetch(proxyUrl + url, requestOptions).then(response => response.json()).then(data => {\n      alert(data.message);\n      console.log(data);\n    }).catch(error => {\n      alert(error);\n      console.error(error);\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(\"h3\", null, \"Add Review\"), __jsx(FormControl, {\n      component: \"fieldset\",\n      className: \"container\"\n    }, __jsx(FormGroup, null, __jsx(TextField, {\n      className: \"smallField\",\n      type: \"text\",\n      value: this.state.title,\n      onChange: e => this.setState({\n        title: e.target.value\n      }),\n      label: \"Title\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"mediumField\",\n      type: \"text\",\n      value: this.state.titleImage,\n      onChange: e => this.setState({\n        titleImage: e.target.value\n      }),\n      label: \"Title Image\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"mediumField\",\n      type: \"text\",\n      value: this.state.language,\n      onChange: e => this.setState({\n        language: e.target.value\n      }),\n      label: \"Language\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"month\",\n      value: this.state.year,\n      onChange: e => this.setState({\n        year: e.target.value\n      }),\n      label: \"Year\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"text\",\n      value: this.state.genre,\n      onChange: e => this.setState({\n        genre: e.target.value\n      }),\n      label: \"Genre\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.rating,\n      onChange: e => this.setState({\n        rating: e.target.value\n      }),\n      label: \"Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.scriptRating,\n      onChange: e => this.setState({\n        scriptRating: e.target.value\n      }),\n      label: \"Script Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.directionRating,\n      onChange: e => this.setState({\n        directionRating: e.target.value\n      }),\n      label: \"Direction Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.dialoguesRating,\n      onChange: e => this.setState({\n        dialoguesRating: e.target.value\n      }),\n      label: \"Dialogues Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.cinematographyRating,\n      onChange: e => this.setState({\n        cinematographyRating: e.target.value\n      }),\n      label: \"Cinematography Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.editingRating,\n      onChange: e => this.setState({\n        editingRating: e.target.value\n      }),\n      label: \"Editing Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.musicRating,\n      onChange: e => this.setState({\n        musicRating: e.target.value\n      }),\n      label: \"Music Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"number\",\n      value: this.state.actingRating,\n      onChange: e => this.setState({\n        actingRating: e.target.value\n      }),\n      label: \"Acting Rating\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"mediumField\",\n      type: \"text\",\n      value: this.state.trailer,\n      onChange: e => this.setState({\n        trailer: e.target.value\n      }),\n      label: \"Trailer\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextareaAutosize, {\n      \"aria-label\": \"Synopsis\",\n      rowsMin: 3,\n      placeholder: \"Synopsis\",\n      value: this.state.synopsis,\n      onChange: e => this.setState({\n        synopsis: e.target.value\n      }),\n      className: \"textArea\"\n    }), __jsx(TextareaAutosize, {\n      \"aria-label\": \"Pros\",\n      rowsMin: 3,\n      placeholder: \"Pros\",\n      value: this.state.pros,\n      onChange: e => this.setState({\n        pros: e.target.value\n      }),\n      className: \"textArea\"\n    }), __jsx(TextareaAutosize, {\n      \"aria-label\": \"Cons\",\n      rowsMin: 3,\n      placeholder: \"Cons\",\n      value: this.state.cons,\n      onChange: e => this.setState({\n        cons: e.target.value\n      }),\n      className: \"textArea\"\n    }), __jsx(TextareaAutosize, {\n      \"aria-label\": \"Cast\",\n      rowsMin: 3,\n      placeholder: \"Cast\",\n      value: this.state.cast,\n      onChange: e => this.setState({\n        cast: e.target.value\n      }),\n      className: \"textArea\"\n    }), __jsx(TextField, {\n      className: \"mediumField\",\n      type: \"text\",\n      value: this.state.ticketImage,\n      onChange: e => this.setState({\n        ticketImage: e.target.value\n      }),\n      label: \"Ticket Image\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"date\",\n      value: this.state.watchDate,\n      onChange: e => this.setState({\n        watchDate: e.target.value\n      }),\n      label: \"Watch Date\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"text\",\n      value: this.state.placeWatched,\n      onChange: e => this.setState({\n        placeWatched: e.target.value\n      }),\n      label: \"Venue\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"text\",\n      value: this.state.userId,\n      onChange: e => this.setState({\n        userId: e.target.value\n      }),\n      label: \"User Id\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: e => this.setState({\n        password: e.target.value\n      }),\n      label: \"Password\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(Button, {\n      onClick: this.onSubmit\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Movie;","map":null,"metadata":{},"sourceType":"module"}