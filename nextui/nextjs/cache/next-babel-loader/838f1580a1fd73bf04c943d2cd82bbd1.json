{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\n\nconst toBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});\n\nclass Movie extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setupBeforeUnloadListener\", () => {\n      window.addEventListener(\"beforeunload\", ev => {\n        ev.preventDefault();\n        return ev.returnValue = \"Are you sure you want to close ?\";\n      });\n    });\n\n    this.state = {\n      imageName: \"\",\n      userId: \"\",\n      password: \"\"\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onFileChange = this.onFileChange.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  componentDidMount() {\n    // Activate the event listener\n    this.setupBeforeUnloadListener();\n  }\n\n  onSubmit(evt) {\n    if (this.state.imageName == \"\") {\n      alert(\"Image name is empty\");\n      return;\n    }\n\n    var strImage = this.state.image.replace(/^data:image\\/[a-z]+;base64,/, \"\");\n    var data = {\n      imageName: this.state.imageName,\n      image: strImage,\n      imageType: this.state.imageType,\n      userId: this.state.userId,\n      password: this.state.password\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    var proxyUrl = 'https://fierce-chamber-21718.herokuapp.com/';\n    var url = 'https://api.popcorntales.com/object';\n    fetch(proxyUrl + url, requestOptions).then(response => response.json()).then(data => {\n      alert(data.message);\n      console.log(data);\n    }).catch(error => {\n      alert(error);\n      console.error(error);\n    });\n  }\n\n  async onFileChange(evt) {\n    const file = document.querySelector('#file').files[0];\n    debugger;\n    this.setState({\n      image: await toBase64(file),\n      imageType: file.type\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(\"h3\", null, \"Add Image\"), __jsx(FormControl, {\n      component: \"fieldset\",\n      className: \"container\"\n    }, __jsx(FormGroup, null, __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.onFileChange\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"text\",\n      value: this.state.imageName,\n      onChange: e => this.setState({\n        imageName: e.target.value\n      }),\n      label: \"Image Name\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"text\",\n      value: this.state.userId,\n      onChange: e => this.setState({\n        userId: e.target.value\n      }),\n      label: \"User Id\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(TextField, {\n      className: \"smallField\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: e => this.setState({\n        password: e.target.value\n      }),\n      label: \"Password\",\n      InputProps: {\n        disableUnderline: true\n      }\n    }), __jsx(Button, {\n      onClick: this.onSubmit\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Movie;","map":null,"metadata":{},"sourceType":"module"}