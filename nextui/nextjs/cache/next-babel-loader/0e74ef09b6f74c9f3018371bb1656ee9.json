{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport MailIcon from '@material-ui/icons/Mail';\nimport 'chart.js';\nimport HomeButton from '@material-ui/icons/Home';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport React, { Component } from 'react';\nimport { ColumnChart, LineChart, PieChart } from 'react-chartkick';\nimport Head from 'next/head';\nimport LazyLoad from 'react-lazyload';\n\nvar Analytics = /*#__PURE__*/function (_Component) {\n  _inherits(Analytics, _Component);\n\n  var _super = _createSuper(Analytics);\n\n  function Analytics(props) {\n    var _this;\n\n    _classCallCheck(this, Analytics);\n\n    _this = _super.call(this, props);\n    var result = props.movies;\n\n    var languagesData = _this.getLanguages(result);\n\n    var yearData = _this.getMovieCountByYear(result);\n\n    var categoryData = _this.getMovieCountByCategory(result);\n\n    var ratingByCategory = _this.getRatingCountByCategory(result);\n\n    var ratingCountByLanguage = _this.getratingCountByLanguage(result);\n\n    _this.state = {\n      totalMovies: result.length,\n      languagesData: languagesData,\n      yearData: yearData,\n      categoryData: categoryData,\n      ratingByCategory: ratingByCategory,\n      ratingCountByLanguage: ratingCountByLanguage\n    };\n    return _this;\n  }\n\n  _createClass(Analytics, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Popcorn Tales\"), __jsx(\"meta\", {\n        name: \"description\",\n        content: \"Popcorn Tales is an Indian movie review website reviewing movies from Kannada,Hindi,English,Tamil,Telugu,Malayalam and other languages. Find latest movie review here.\"\n      }), __jsx(\"link\", {\n        async: true,\n        rel: \"icon\",\n        type: \"image/x-icon\",\n        href: \"/favicon.ico\"\n      }), __jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1\"\n      }), __jsx(\"meta\", {\n        name: \"theme-color\",\n        content: \"#000000\"\n      }), __jsx(\"link\", {\n        async: true,\n        rel: \"canonical\",\n        href: \"https://www.Popcorntales.com/\"\n      }), __jsx(\"script\", {\n        src: \"https://www.gstatic.com/firebasejs/7.14.3/firebase-app.js\"\n      }), __jsx(\"script\", {\n        src: \"https://www.gstatic.com/firebasejs/7.14.3/firebase-analytics.js\"\n      }), __jsx(\"script\", {\n        dangerouslySetInnerHTML: {\n          __html: \"\\n              var firebaseConfig = {\\n                apiKey: \\\"AIzaSyAXuIINLnRmwacxjys3I6ziuSTq8lJ0iw8\\\",\\n                authDomain: \\\"popcorntales-40767.firebaseapp.com\\\",\\n                databaseURL: \\\"https://popcorntales-40767.firebaseio.com\\\",\\n                projectId: \\\"popcorntales-40767\\\",\\n                storageBucket: \\\"popcorntales-40767.appspot.com\\\",\\n                messagingSenderId: \\\"512137794051\\\",\\n                appId: \\\"1:512137794051:web:be612f2d6aa7c368d4b436\\\",\\n                measurementId: \\\"G-LK5DBSBMTR\\\"\\n              };\\n              firebase.initializeApp(firebaseConfig);\\n              firebase.analytics(); \"\n        }\n      }), __jsx(\"script\", null), __jsx(\"script\", {\n        async: true,\n        src: \"https://www.googletagmanager.com/gtag/js?id=UA-170786754-1\"\n      })), __jsx(AppBar, {\n        id: \"appBar\",\n        position: \"static\"\n      }, __jsx(Toolbar, {\n        id: \"toolbar\"\n      }, __jsx(Grid, {\n        container: true,\n        alignContent: \"center\"\n      }, __jsx(\"a\", {\n        href: \"/\"\n      }, __jsx(HomeButton, null)), __jsx(\"h1\", {\n        id: \"title\"\n      }, \"Popcorn Tales\")))), __jsx(Grid, {\n        container: true,\n        justify: \"center\",\n        className: \"analytics\"\n      }, __jsx(LazyLoad, {\n        once: true\n      }, __jsx(Paper, {\n        elevation: 15,\n        className: \"mediumChart\"\n      }, __jsx(Grid, {\n        container: true,\n        justify: \"center\"\n      }, __jsx(\"h3\", null, \"Total Movies : \", this.state.totalMovies), __jsx(PieChart, {\n        id: \"movieChart\",\n        data: this.state.languagesData,\n        legend: \"bottom\",\n        width: 250,\n        height: 250\n      })))), __jsx(LazyLoad, {\n        once: true\n      }, __jsx(Paper, {\n        elevation: 15,\n        className: \"mediumChart\"\n      }, __jsx(PieChart, {\n        data: this.state.categoryData,\n        legend: \"bottom\",\n        donut: true,\n        id: \"categoryChart\"\n      }))), __jsx(LazyLoad, {\n        once: true\n      }, __jsx(Paper, {\n        elevation: 15,\n        className: \"mediumChart\"\n      }, __jsx(LineChart, {\n        data: this.state.ratingCountByLanguage,\n        id: \"languageLineChart\",\n        precision: 2,\n        xtitle: \"Movie\",\n        ytitle: \"Rating\",\n        min: 0,\n        max: 5.0,\n        legend: \"bottom\"\n      }))), __jsx(LazyLoad, {\n        once: true\n      }, __jsx(Paper, {\n        elevation: 15,\n        className: \"mediumChart\"\n      }, __jsx(LineChart, {\n        data: this.state.ratingByCategory,\n        precision: 2,\n        id: \"categoryLineChart\",\n        xtitle: \"Category\",\n        ytitle: \"Rating\",\n        min: 0,\n        max: 5.0,\n        legend: \"bottom\"\n      }))), __jsx(LazyLoad, {\n        once: true\n      }, __jsx(Paper, {\n        elevation: 15,\n        className: \"mediumChart\"\n      }, __jsx(ColumnChart, {\n        data: this.state.yearData,\n        id: \"yearChart\",\n        xtitle: \"Year\",\n        ytitle: \"Movies Watched\"\n      })))), __jsx(\"footer\", null, __jsx(\"div\", {\n        id: \"footerText\"\n      }, __jsx(\"h6\", null, \"Need your feedback to improve\", __jsx(\"a\", {\n        href: \"mailto:popcorntales19@gmail.com\"\n      }, \" \", __jsx(MailIcon, null))))));\n    }\n  }, {\n    key: \"getLanguages\",\n    value: function getLanguages(result) {\n      var languages = [];\n      var languageCount = [];\n\n      for (var i = 0; i < result.length; i++) {\n        if (!languages.includes(result[i].language)) {\n          languages.push(result[i].language);\n        }\n      }\n\n      for (i = 0; i < languages.length; i++) {\n        var count = result.filter(function (obj) {\n          return obj.language === languages[i];\n        }).length;\n        languageCount.push([languages[i], count]);\n      }\n\n      return languageCount;\n    }\n  }, {\n    key: \"getMovieCountByYear\",\n    value: function getMovieCountByYear(result) {\n      var year = [];\n      var yearCount = [];\n\n      for (var i = 0; i < result.length; i++) {\n        var y = new Date(result[i].timeStamp).getFullYear();\n\n        if (!year.includes(y)) {\n          year.push(y);\n        }\n      }\n\n      for (i = 0; i < year.length; i++) {\n        var count = result.filter(function (obj) {\n          return new Date(obj.timeStamp).getFullYear() === year[i];\n        }).length;\n        yearCount.push([year[i], count]);\n      }\n\n      return yearCount;\n    }\n  }, {\n    key: \"getratingCountByLanguage\",\n    value: function getratingCountByLanguage(result) {\n      var languages = [];\n\n      for (var i = 0; i < result.length; i++) {\n        if (!languages.includes(result[i].language)) {\n          languages.push(result[i].language);\n        }\n      }\n\n      var languageData = [{\n        name: \"min\",\n        data: {}\n      }, {\n        name: \"avg\",\n        data: {}\n      }, {\n        name: \"max\",\n        data: {}\n      }];\n\n      for (i = 0; i < languages.length; i++) {\n        var filteredByLanguage = result.filter(function (obj) {\n          return obj.language === languages[i];\n        });\n        var min = 999;\n        var max = -1;\n        var sum = 0;\n\n        for (var j = 0; j < filteredByLanguage.length; j++) {\n          if (filteredByLanguage[j].rating < min) min = filteredByLanguage[j].rating;\n          if (filteredByLanguage[j].rating > max) max = filteredByLanguage[j].rating;\n          sum = sum + filteredByLanguage[j].rating;\n        }\n\n        var avg = sum / filteredByLanguage.length;\n        languageData[0].data[languages[i]] = min;\n        languageData[1].data[languages[i]] = avg;\n        languageData[2].data[languages[i]] = max;\n      }\n\n      return languageData;\n    }\n  }, {\n    key: \"getRatingCountByCategory\",\n    value: function getRatingCountByCategory(result) {\n      var catergories = [];\n      var categoryCount = [];\n\n      for (var i = 0; i < result.length; i++) {\n        for (var j = 0; j < result[i].genre.length; j++) {\n          if (!catergories.includes(result[i].genre[j])) catergories.push(result[i].genre[j]);\n        }\n      }\n\n      var categoryData = [{\n        name: \"min\",\n        data: {}\n      }, {\n        name: \"avg\",\n        data: {}\n      }, {\n        name: \"max\",\n        data: {}\n      }];\n\n      for (i = 0; i < catergories.length; i++) {\n        var filteredByCategory = result.filter(function (obj) {\n          return obj.genre.includes(catergories[i]);\n        });\n        var min = 999;\n        var max = -1;\n        var sum = 0;\n\n        for (var j = 0; j < filteredByCategory.length; j++) {\n          if (filteredByCategory[j].rating < min) min = filteredByCategory[j].rating;\n          if (filteredByCategory[j].rating > max) max = filteredByCategory[j].rating;\n          sum = sum + filteredByCategory[j].rating;\n        }\n\n        var avg = sum / filteredByCategory.length;\n        categoryData[0].data[catergories[i]] = min;\n        categoryData[1].data[catergories[i]] = avg;\n        categoryData[2].data[catergories[i]] = max;\n      }\n\n      return categoryData;\n    }\n  }, {\n    key: \"getMovieCountByCategory\",\n    value: function getMovieCountByCategory(result) {\n      var catergories = [];\n      var categoryCount = [];\n\n      for (var i = 0; i < result.length; i++) {\n        for (var j = 0; j < result[i].genre.length; j++) {\n          if (!catergories.includes(result[i].genre[j])) catergories.push(result[i].genre[j]);\n        }\n      }\n\n      for (var i = 0; i < catergories.length; i++) {\n        var count = result.filter(function (obj) {\n          return obj.genre.includes(catergories[i]);\n        }).length;\n        categoryCount.push([catergories[i], count]);\n      }\n\n      return categoryCount;\n    }\n  }]);\n\n  return Analytics;\n}(Component);\n\nexport var __N_SSP = true;\nexport default Analytics;","map":null,"metadata":{},"sourceType":"module"}