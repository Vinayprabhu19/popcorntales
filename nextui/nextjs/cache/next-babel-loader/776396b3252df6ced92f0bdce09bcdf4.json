{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GridList from '@material-ui/core/GridList';\nimport Hidden from '@material-ui/core/Hidden';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport MailIcon from '@material-ui/icons/Mail';\nimport SortIcon from '@material-ui/icons/Sort';\nimport React, { Component } from 'react';\nimport { Carousel } from 'react-responsive-carousel';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport CardLayout from \"../components/CardLayout\";\nimport Sort from \"../components/Sort\";\nimport Pagination from '@material-ui/lab/Pagination';\nimport Filter from \"../components/Filter\";\nimport Head from 'next/head';\nimport LazyImage from \"../components/LazyImage\";\nimport Grid from '@material-ui/core/Grid';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport SocialMenu from '../components/SocialMenu';\nimport Tooltip from '@material-ui/core/Tooltip';\nexport async function getServerSideProps(context) {\n  const res = await fetch('https://api.popcorntales.com/movie');\n  const movies = await res.json();\n  var banners = [];\n\n  for (var i = 1; i <= 4; i++) {\n    banners.push({\n      id: i,\n      name: \"Movie\" + i,\n      url: \"https://api.popcorntales.com/image?object=Banners/Movie\" + i + \".jpg\"\n    });\n  } // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n\n\n  return {\n    props: {\n      movies,\n      banners\n    }\n  };\n}\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSelect\", (selectedIndex, e) => {\n      this.carouselIndex = selectedIndex;\n    });\n\n    var result = props.movies;\n    var filter = this.getFilteredData(result);\n    var banners = props.banners;\n    result.sort(function (a, b) {\n      return new Date(b.timeStamp) - new Date(a.timeStamp);\n    });\n    const rvs = result.map(item => {\n      return item;\n    });\n    var currentPages = [];\n    var len = rvs.length > 8 ? 8 : rvs.length;\n\n    for (var i = 0; i < len; i++) {\n      currentPages.push(rvs[i]);\n    } // Don't call this.setState() here!\n\n\n    this.state = {\n      reviews: [],\n      currentList: [],\n      banners: banners,\n      loading: true,\n      sortOpen: false,\n      filterOpen: false,\n      searchText: \"\",\n      activePage: 1,\n      totalPages: rvs.length,\n      allReviews: rvs,\n      reviews: rvs,\n      currentList: currentPages,\n      loading: false,\n      filter: {\n        \"language\": \"All\",\n        \"year\": \"All\",\n        \"rating\": [0.0, 5.0]\n      },\n      sorter: {\n        \"field\": \"timeStamp\",\n        \"sortType\": \"Descending\"\n      },\n      filterData: filter\n    };\n    this.carouselIndex = 0;\n    this.onPageChanged = this.onPageChanged.bind(this);\n    this.openSort = this.openSort.bind(this);\n    this.handleSortClose = this.handleSortClose.bind(this);\n    this.openFilter = this.openFilter.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n  }\n\n  onPageChanged(e) {\n    var targetPage = parseInt(e.target.innerText);\n    var currentPages = [];\n    var start = 8 * (targetPage - 1);\n    var len = this.state.reviews.length > 8 * targetPage ? 8 * targetPage : this.state.reviews.length;\n\n    for (var i = start; i < len; i++) {\n      currentPages.push(this.state.reviews[i]);\n    }\n\n    this.setState({\n      currentList: currentPages,\n      activePage: targetPage\n    });\n  }\n\n  onSearch(e) {\n    var text = e.target.value;\n    var reviews = [];\n\n    for (var i = 0; i < this.state.allReviews.length; i++) {\n      reviews.push(this.state.allReviews[i]);\n    }\n\n    reviews = reviews.filter(function (r) {\n      return r.title.toLocaleLowerCase().includes(text.toLowerCase());\n    });\n    var currentPages = [];\n    var len = reviews.length > 8 ? 8 : reviews.length;\n\n    for (var i = 0; i < len; i++) {\n      currentPages.push(reviews[i]);\n    }\n\n    this.setState({\n      activePage: 1,\n      totalPages: reviews.length,\n      reviews: reviews,\n      currentList: currentPages,\n      loading: false,\n      filter: {\n        \"language\": \"All\",\n        \"year\": \"All\",\n        \"rating\": [0.0, 5.0]\n      },\n      searchText: text\n    });\n  }\n\n  onCardClick(image) {\n    this.props.history.push('/review/' + image.title);\n  }\n\n  openSort() {\n    this.setState({\n      sortOpen: true\n    });\n  }\n\n  openFilter() {\n    this.setState({\n      filterOpen: true\n    });\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Popcorn Tales\"), __jsx(\"meta\", {\n      name: \"description\",\n      content: \"Popcorn Tales is an Indian movie review website reviewing movies from Kannada,Hindi,English,Tamil,Telugu,Malayalam and other languages. Find latest movie review here.\"\n    }), __jsx(\"link\", {\n      async: true,\n      rel: \"icon\",\n      type: \"image/x-icon\",\n      href: \"/favicon.ico\"\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#000000\"\n    }), __jsx(\"link\", {\n      async: true,\n      rel: \"canonical\",\n      href: \"https://www.Popcorntales.com/\"\n    }), __jsx(\"script\", {\n      src: \"https://www.gstatic.com/firebasejs/7.14.3/firebase-app.js\"\n    }), __jsx(\"script\", {\n      src: \"https://www.gstatic.com/firebasejs/7.14.3/firebase-analytics.js\"\n    }), __jsx(\"script\", {\n      dangerouslySetInnerHTML: {\n        __html: `\n              var firebaseConfig = {\n                apiKey: \"AIzaSyAXuIINLnRmwacxjys3I6ziuSTq8lJ0iw8\",\n                authDomain: \"popcorntales-40767.firebaseapp.com\",\n                databaseURL: \"https://popcorntales-40767.firebaseio.com\",\n                projectId: \"popcorntales-40767\",\n                storageBucket: \"popcorntales-40767.appspot.com\",\n                messagingSenderId: \"512137794051\",\n                appId: \"1:512137794051:web:be612f2d6aa7c368d4b436\",\n                measurementId: \"G-LK5DBSBMTR\"\n              };\n              firebase.initializeApp(firebaseConfig);\n              firebase.analytics();\n                  `\n      }\n    })), __jsx(\"div\", null, __jsx(Backdrop, {\n      open: this.state.loading\n    }, __jsx(CircularProgress, {\n      color: \"inherit\"\n    })), __jsx(\"div\", {\n      className: this.state.loading ? 'hidden' : 'App'\n    }, __jsx(AppBar, {\n      id: \"appBar\",\n      position: \"static\"\n    }, __jsx(Toolbar, null, __jsx(Tooltip, {\n      title: \"Analytics\"\n    }, __jsx(\"a\", {\n      href: \"/analytics\"\n    }, __jsx(BarChartIcon, {\n      fontSize: \"large\",\n      color: \"primary\"\n    }))), __jsx(\"h1\", {\n      id: \"title\"\n    }, \"Popcorn Tales\"), __jsx(\"section\", {\n      className: \"rightToolbar\"\n    }, __jsx(SocialMenu, null)))), __jsx(Paper, {\n      id: \"banner-container\",\n      elevation: 10\n    }, __jsx(Carousel, {\n      showThumbs: false,\n      showStatus: false\n    }, this.state.banners.map(banner => {\n      return __jsx(\"div\", {\n        key: banner.id\n      }, __jsx(LazyImage, {\n        className: \"movie-img\",\n        src: banner.url,\n        key: banner.id,\n        alt: \"Movie Banner\"\n      }));\n    }))), __jsx(Paper, {\n      elevation: 12,\n      id: \"filterGrid\"\n    }, __jsx(Grid, {\n      container: true,\n      justify: \"center\",\n      className: \"filter-sort\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      id: \"searchField\",\n      value: this.state.searchText,\n      onChange: this.onSearch,\n      placeholder: \"Movie Title\"\n    }), __jsx(Hidden, {\n      smDown: true\n    }, __jsx(Tooltip, {\n      title: \"Sort\"\n    }, __jsx(Button, {\n      className: \"iconBtn\",\n      onClick: this.openSort\n    }, __jsx(SortIcon, {\n      fontSize: \"large\"\n    }))), __jsx(Tooltip, {\n      title: \"Filter\"\n    }, __jsx(Button, {\n      className: \"iconBtn\",\n      onClick: this.openFilter\n    }, __jsx(FilterListIcon, {\n      fontSize: \"large\"\n    }), \" \"))), __jsx(Hidden, {\n      mdUp: true\n    }, __jsx(Tooltip, {\n      title: \"Sort\"\n    }, __jsx(Button, {\n      className: \"iconBtn\",\n      onClick: this.openSort\n    }, __jsx(SortIcon, {\n      fontSize: \"default\"\n    }))), __jsx(Tooltip, {\n      title: \"Filter\"\n    }, __jsx(Button, {\n      className: \"iconBtn\",\n      onClick: this.openFilter\n    }, __jsx(FilterListIcon, {\n      fontSize: \"default\"\n    }), \" \"))), __jsx(Sort, {\n      open: this.state.sortOpen,\n      close: data => this.handleSortClose(data),\n      data: this.state.sorter\n    }), __jsx(Filter, {\n      open: this.state.filterOpen,\n      close: data => this.handleFilterClose(data),\n      data: this.state.filter,\n      filterData: this.state.filterData\n    }))), __jsx(\"div\", {\n      className: \"App-Content\"\n    }, __jsx(GridList, {\n      className: \"cardGridList\"\n    }, this.state.currentList.map(image => __jsx(CardLayout, {\n      key: image.title,\n      review: image\n    })))), __jsx(\"footer\", null, __jsx(Pagination, {\n      count: this.state.totalPages % 8,\n      page: this.state.activePage,\n      onChange: this.onPageChanged\n    }), __jsx(Grid, {\n      container: true,\n      justify: \"center\",\n      id: \"footerText\"\n    }, __jsx(\"h4\", {\n      id: \"feedbackText\"\n    }, \"Need your feedback to improve  \"), __jsx(\"a\", {\n      href: \"mailto:popcorntales19@gmail.com\"\n    }, \" \", __jsx(MailIcon, null)))))));\n  }\n\n  getFilteredData(result) {\n    var languages = [\"All\"];\n    var years = [\"All\"];\n\n    for (var i = 0; i < result.length; i++) {\n      if (languages.includes(result[i].language)) continue;\n      languages.push(result[i].language);\n    }\n\n    for (var i = 0; i < result.length; i++) {\n      if (years.includes(result[i].year)) continue;\n      years.push(result[i].year);\n    }\n\n    years.sort();\n    return {\n      languages: languages,\n      years: years,\n      rating: [0.0, 5.0]\n    };\n  }\n\n  handleFilterClose(data) {\n    if (data == null) {\n      this.setState({\n        filterOpen: false\n      });\n      return;\n    }\n\n    var reviews = [];\n\n    for (var i = 0; i < this.state.allReviews.length; i++) {\n      reviews.push(this.state.allReviews[i]);\n    }\n\n    if (data.filter.language != \"All\") {\n      reviews = reviews.filter(function (r) {\n        return r.language == data.filter.language;\n      });\n    }\n\n    if (data.filter.year != \"All\") {\n      reviews = reviews.filter(function (r) {\n        return r.year == data.filter.year;\n      });\n    }\n\n    reviews = reviews.filter(function (r) {\n      return r.rating >= data.filter.rating[0] && r.rating <= data.filter.rating[1];\n    });\n    var currentPages = [];\n    var len = reviews.length > 8 ? 8 : reviews.length;\n\n    for (var i = 0; i < len; i++) {\n      currentPages.push(reviews[i]);\n    }\n\n    this.setState({\n      activePage: 1,\n      totalPages: reviews.length,\n      reviews: reviews,\n      currentList: currentPages,\n      loading: false,\n      sortOpen: false,\n      filterOpen: false,\n      filter: data.filter,\n      searchText: \"\"\n    });\n  }\n\n  handleSortClose(data) {\n    // result.sort(function(a,b){return new Date(b.timeStamp)- new Date(a.timeStamp)});\n    // sorter:{\n    //   \"field\":\"timeStamp\",\n    //   \"sortType\":\"Ascending\"\n    // }\n    if (data.field === this.state.sorter.field && data.sortType === this.state.sorter.sortType) {\n      this.setState({\n        sortOpen: false\n      });\n      return;\n    }\n\n    var reviews;\n\n    if (this.field === \"timeStamp\") {\n      if (data.sortType === \"Descending\") reviews = this.state.reviews.sort(function (a, b) {\n        return new Date(b.timeStamp) - new Date(a.timeStamp);\n      });else reviews = this.state.reviews.sort(function (a, b) {\n        return new Date(a.timeStamp) - new Date(b.timeStamp);\n      });\n    } else {\n      if (data.sortType === \"Descending\") reviews = this.state.reviews.sort(function (a, b) {\n        if (a[data.field] > b[data.field]) {\n          return -1;\n        }\n\n        if (a[data.field] < b[data.field]) {\n          return 1;\n        }\n\n        return 0;\n      });else reviews = this.state.reviews.sort(function (a, b) {\n        if (a[data.field] < b[data.field]) {\n          return -1;\n        }\n\n        if (a[data.field] > b[data.field]) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n\n    var currentPages = [];\n    var len = reviews.length > 8 ? 8 : reviews.length;\n\n    for (var i = 0; i < len; i++) {\n      currentPages.push(reviews[i]);\n    }\n\n    this.setState({\n      activePage: 1,\n      totalPages: reviews.length,\n      reviews: reviews,\n      currentList: currentPages,\n      loading: false,\n      sortOpen: false,\n      sorter: data\n    });\n  }\n\n}\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}